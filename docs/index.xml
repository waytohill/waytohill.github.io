<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>waytohill site</title>
    <link>https://waytohill.github.io/</link>
    <description>Recent content on waytohill site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2022 21:30:04 +0800</lastBuildDate><atom:link href="https://waytohill.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[LATEX]Writing LaTeX documents with VSCode on Mac</title>
      <link>https://waytohill.github.io/posts/macos-latex-vscode/</link>
      <pubDate>Sat, 15 Jun 2024 23:37:34 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/macos-latex-vscode/</guid>
      <description>最近在写论文，感觉用word进行格式控制非常麻烦，于是以后打算使用LaTeX写。那么首先就是要配置好环境。
以下是我参考网上教程整理记录的自己安装和配置好LaTeX环境的过程，供大家参考，同时方便以后想重新安装时可以进行快速配置。
1 安装MacTeX MacTeX是TeX Live的Mac版本，是LaTeX的基础运行环境，提供LaTeX的编译器和TeX bin等内置命令。
首先下载MacTeX：下载地址
打开界面后点击MacTeX.pkg进行下载。文件大小5.7G，下载时间大概15-20min。
下载完成后双击打开进行安装。
安装完成后，在Terminal输入“latex -version”，如果显示版本号，说明安装成功。
在/Application中会生成一个文件夹/TeX，可以看一下里面的pdf文件READ ME FIRST，了解LaTeX的简单使用方法。
2 安装Skim阅读器 Skim是一个支持macOS的轻量级pdf阅读器。下载地址
LaTeX支持使用外部pdf阅读器浏览pdf文件，所以使用能够自定义的Skim阅读器可以带来更好的体验，同时能够在VSCode中实现分屏实施浏览文章的排版和效果。
3 安装VSCode 为了实现在VSCode中写LaTeX文件，自然需要安装VSCode。下载地址
4 VSCode配置 4.1 安装LaTeX Workshop插件 LaTeX Workshop是VSCode中支持LaTeX语言的插件，能够实现在VSCode中进行LaTeX文件的编译、项目创建和排版浏览等功能。
安装好后重启一下，打开一个.tex文件。此时可以看到左边栏出现了TEX扩展，点击可以进入LaTeX工作台。左下角也会出现一个“✓”或“×”，点击也可以进入工作台。
点击“View LaTeX PDF”，可以打开右侧的预览窗口查看排版情况。
4.2 配置LaTeX Workshop的Settings JSON文件 安装完成后需要对工作台进行相应配置，以便使用编译命令和自动编译等功能。
“command+shift+P”，打开命令行
输入“Open Settings(JSON)”，打开配置文件，如果没有的话可以先“Open Settings(UI)”，然后点击右上角的文件图标，打开JSON文件
把下面的内容复制进JSON文件中，在后面添加，不要覆盖原有的内容
// LaTeX // 不在保存的时候自动编译 &amp;#34;latex-workshop.latex.autoBuild.run&amp;#34;: &amp;#34;never&amp;#34;, // 编译工具 &amp;#34;latex-workshop.latex.tools&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;xelatex&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;xelatex&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;-synctex=1&amp;#34;, &amp;#34;-interaction=nonstopmode&amp;#34;, &amp;#34;-file-line-error&amp;#34;, &amp;#34;-pdf&amp;#34;, &amp;#34;%DOCFILE%&amp;#34; ] }, { &amp;#34;name&amp;#34;: &amp;#34;pdflatex&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;pdflatex&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;-synctex=1&amp;#34;, &amp;#34;-interaction=nonstopmode&amp;#34;, &amp;#34;-file-line-error&amp;#34;, &amp;#34;%DOCFILE%&amp;#34; ] }, { &amp;#34;name&amp;#34;: &amp;#34;bibtex&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;bibtex&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;%DOCFILE%&amp;#34; ] } ], // 编译命令 &amp;#34;latex-workshop.</description>
    </item>
    
    <item>
      <title>[TOGE]01.Baseline Wander</title>
      <link>https://waytohill.github.io/posts/python-data-process/</link>
      <pubDate>Sat, 15 Jun 2024 21:09:22 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/python-data-process/</guid>
      <description>0. TOGE简要介绍 TOGE
Treatment
Organize
Generate
Extract
TOGE是一系列基于Python的数据预处理、组织分析、计算生成和特征提取的方法和算法。主要解决我在实验过程中采集和处理数据时遇到的问题。如果一直遇到各种各样的问题的话，这个系列或许会一直更新下去，作为自己解决方案的记录和速查手册。
0. 为什么使用Python Python因为其可读性强的语法和功能丰富的科学计算库等特性，自然而然地成为了在进行数据处理时最常被使用的语言。作为一种高级编程语言，Python的语法非常接近英语的语法，某种程度上属于会英语就可以上手的编程语言，因此非常简单且易于学习。Python拥有非常丰富的用于科学计算和数据处理的库，例如NumPy(2006)、Pandas(2008)、Scikit-Learn(2007)等^[1]^。这些库的出现为用户提供了一种更为方便快速的方式处理大量数据，进行数值计算，以及实现机器学习算法。因此，我们选择Python作为日常实验数据的处理是非常合理的。
1. 什么是基线漂移 基线漂移(Baseline Wander)是指仪器或系统输出的基线水平随时间的变化，具体表现为在采集的数据中添加了线性或非线性趋势的低频噪声。在许多测量系统中，基线代表了零点或正常工作条件下的参考水平，基线漂移可能由多种因素引起，包括环境条件的变化、仪器的老化、测试材料表面特性的变化等^[2]^。基线漂移可能会影响测量结果的准确性和稳定性，在进行FFT分析时，可能会导致主频成分不明显、信号畸变，从而影响信号处理效果。为了减少基线漂移的影响，可以定期对实验仪器进行校准和调整，或者通过滤波、信号处理等方法对采集到的数据进行处理，以获得可用的数据。
上图为一组含有非线性趋势的基线漂移的数据。线性趋势基线的消除比较简单，可以使用scipy库中的Scipy.signal.detrend()函数^[3]^进行消除。本文主要介绍一种基于中值滤波处理非线性趋势基线漂移的方法。
2. 什么是中值滤波 中值滤波是指：选取固定大小的滑动窗口，每次滤波选择滑动窗口内的中位数或者中位数的平均数作为滤波的结果。
使用Scipy库中的medfilt()^[4]^函数实现中值滤波。
scipy.signal.medfilt(volume, kernel_size=None) # volume是需要滤波的数据 # kernel_size是滑动窗口大小 # 返回值为滤波后的数据，具体用法如下 import scipy.signal as signal data_filted = signal.medfilt(data,5) # 上述表示用一个大小为5的滑动窗口对data进行滤波处理，并将结果保存到data_filted中 中值滤波能够有效抑制噪声，因此可以用来消除导致基线漂移的低频噪声。
3. 基于中值滤波的基线漂移处理方法 对所采集到的信号消除基线漂移的思路是：对数据ydata进行中值滤波，并将滤波后的数据保存到ydata_baseline中，其中的每个数据都是ydata中对应的数据经过滤波后的中值，也就是这组数据的基线。那么将ydata减去ydata_baseline自然就得到了去除基线影响的数据ydata_filted。
3.1 读取数据 常言道“巧妇难为无米之炊”，在对数据进行滤波处理之前，首先要读取需要处理的数据。我采集到的数据的保存格式为以逗号分隔的csv文件，使用Pandas库进行读取，代码如下。
# 导入pandas库 import pandas as pd # 输入需要打开的文件名 filename = input(&amp;#34;input a filename: &amp;#34;) # 读取指定的csv文件 data = pd.read_csv(filename) #将第一列和第二列数据分别设置为x/y轴数据 xdata = data[&amp;#39;time&amp;#39;] ydata = data[&amp;#39;voltage&amp;#39;] 至此已经完成了对csv文件的导入，接下来添加库matplotlib.</description>
    </item>
    
    <item>
      <title>[Lyrics]迷星叫--MyGO!!!!!</title>
      <link>https://waytohill.github.io/posts/lyric-mayoiuta/</link>
      <pubDate>Mon, 01 Apr 2024 16:14:47 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/lyric-mayoiuta/</guid>
      <description>交差点の真ん中　急ぐ人に紛れて
僕だけがあてもなく　漂うみたいだ
流行りの歌はいつも　僕のことは歌ってない
ねえビジョンの中から　笑いかけないで
また今日も声にならずに　飲み込んだ感情
下書き埋め尽くして
ああ　そうやって何千回夜を越える
僕のため　それだけ　それだけだったんだよ
出口探し　溢れただけの言葉
君の心へ届いて　隙間をちょっと埋めれなら
こんな僕でも　ここにいる　叫ぶよ
迷い星のうた
問われることは何故か　将来のことばかり
目の前にいる僕の　今はおざなりで
華やぎに馴染めない　この心を無視して
輝かしい明日を　推奨しないでくれ
夜空にチカチカ光る　頼りない星屑
躊躇いながらはぐれて
ああ　彷徨っているそれが僕
僕になる　それしか　それしかできないだろう
誰の真似も　上手くやれないんだ
こんな痛い日々をなんで　退屈だって片付ける？
よろめきながらでも　もがいているんだよ
迷い星のうた
僕のため　それだけ　それだけだったんだよ
涙流し　やっと生まれた言葉
どこかで同じように　ヒリヒリする胸抱えて
震える君に　僕もいる　叫ぶよ
迷い星のうた</description>
    </item>
    
    <item>
      <title>[Blender] How to Bend Object</title>
      <link>https://waytohill.github.io/posts/blender-bend-object/</link>
      <pubDate>Sat, 30 Mar 2024 23:18:17 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/blender-bend-object/</guid>
      <description>记录一下Blender中弯曲物体的简单方法
select the bend-needed object, then enter the edit mode
use shortcut &amp;ldquo;ctrl+r&amp;rdquo; to make some loop cut
back to object mode, then add an arrows as the origin of bending. add-&amp;gt;empty-&amp;gt;arrows
select the bend-needed object, add a modifier-simple Deform
settings are as follows
select bend type angle: control the bend angle, modify the number to change object&amp;rsquo;s bending angle origin: use the arrows created in step.3 axis: choose which axis you want to bend along apply the modifier, now you get a bended object</description>
    </item>
    
    <item>
      <title>[Blender] How to Make a Sector</title>
      <link>https://waytohill.github.io/posts/blender-how-to-make-a-sector/</link>
      <pubDate>Sat, 30 Mar 2024 23:17:36 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/blender-how-to-make-a-sector/</guid>
      <description>记录一下如何快速生成扇形
add a circle
add a plane
enter the edit mode, subdivide the plane for 10~20 times
back to object mode, add a curve modifier to the plane, and use the circle as curve object
change the sector like the following gif, then apply to keep the shape</description>
    </item>
    
    <item>
      <title>[Leetcode][C&#43;&#43;]2789.Largest Element In An Array After Merge Operations</title>
      <link>https://waytohill.github.io/posts/leetcode-2789/</link>
      <pubDate>Thu, 14 Mar 2024 22:17:53 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/leetcode-2789/</guid>
      <description>题目链接-合并后数组中的最大元素
这是一道中等题，主要考察对题目的理解，题目原文如下：
​	给你一个下标从 0 开始、由正整数组成的数组 nums 。
你可以在数组上执行下述操作 任意 次：
选中一个同时满足 0 &amp;lt;= i &amp;lt; nums.length - 1 和 nums[i] &amp;lt;= nums[i + 1] 的整数 i 。将元素 nums[i + 1] 替换为 nums[i] + nums[i + 1] ，并从数组中删除元素 nums[i] 。 返回你可以从最终数组中获得的 最大 元素的值。
示例 1：
输入：nums = [2,3,7,9,3] 输出：21 解释：我们可以在数组上执行下述操作： - 选中 i = 0 ，得到数组 nums = [5,7,9,3] 。 - 选中 i = 1 ，得到数组 nums = [5,16,3] 。 - 选中 i = 0 ，得到数组 nums = [21,3] 。 最终数组中的最大元素是 21 。可以证明我们无法获得更大的元素。 示例 2：</description>
    </item>
    
    <item>
      <title>[Leetcode][C&#43;&#43;]165.Compare Version Numbers</title>
      <link>https://waytohill.github.io/posts/leetcode-165/</link>
      <pubDate>Mon, 04 Mar 2024 22:36:23 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/leetcode-165/</guid>
      <description>题目链接-比较字符串
这是一道中等难度题目，题目如下：
给你两个版本号 version1 和 version2 ，请你比较它们。
版本号由一个或多个修订号组成，各修订号由一个 &#39;.&#39; 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。
比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 &amp;lt; 1 。
返回规则如下：
如果 *version1* &amp;gt; *version2* 返回 1， 如果 *version1* &amp;lt; *version2* 返回 -1， 除此之外返回 0。 这道题目本质是一个比较大小的题目，但是用点号分隔开的不同修订号的优先级不同，因此，在比较时，可以分别比较同一优先级的修订号，如果相同再比较次优先级的修订号，如果不同则输出结果。
根据以上思想，写出比较的代码
具体代码如下：
class Solution { public: int compareVersion(string version1, string version2) { int n=version1.</description>
    </item>
    
    <item>
      <title>[Leetcode][C&#43;&#43;]225.Implement Stack using Queues</title>
      <link>https://waytohill.github.io/posts/leetcode-225/</link>
      <pubDate>Mon, 04 Mar 2024 10:32:23 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/leetcode-225/</guid>
      <description>题目链接-用队列实现栈
这是一道简单题，使用两个队列实现一个后入先出的栈，并支持栈的四种操作push、top、pop和empty
具体代码如下：
class MyStack { public: //初始化两个队列 queue&amp;lt;int&amp;gt; first; queue&amp;lt;int&amp;gt; second; MyStack() { } //实现栈的push操作（将元素压入栈顶），时间复杂度为O(n) void push(int x) { second.push(x); while(!first.empty()){ second.push(first.front()); first.pop(); } swap(first,second); } //实现栈的pop操作（移除并返回栈顶元素） int pop() { int x = first.front(); first.pop(); return x; } //实现栈的top操作（返回栈顶元素） int top() { int x=first.front(); return x; } //当两个队列都为空时，返回true bool empty() { return first.empty()&amp;amp;&amp;amp;second.empty(); } }; </description>
    </item>
    
    <item>
      <title>[ArchLinux]终端模拟器(st)配置</title>
      <link>https://waytohill.github.io/posts/st-setting/</link>
      <pubDate>Sun, 28 Jan 2024 19:49:20 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/st-setting/</guid>
      <description>配置st 修改config.def.h，删除config.h，输入sudo make clean install重新编译安装，之后重启st就可以查看配置后的效果了
修改字体 字体在static char *font字段修改，修改完删除config.h重新编译安装即可
设置shell static char *shell是st默认的shell，可以将其修改为自己喜欢的shell，修改完重新编译
补丁-半透明背景（alpha） </description>
    </item>
    
    <item>
      <title>[ArchLinux]使用pipx代替pip，解决externally-managed-environment问题</title>
      <link>https://waytohill.github.io/posts/install-pipx/</link>
      <pubDate>Fri, 26 Jan 2024 21:36:50 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/install-pipx/</guid>
      <description>在像Ubuntu、Fedora、Arch Linux等最新的linux发行版中，运行pip(3) install会收到错误提示error: externally-managed-environment
这是最新的发行版中为了避免系统自有的包管理工具（比如apt、pacman等）与python的包管理工具pip之间的冲突而导致的。
为了解决这个问题，可以考虑使用pipx，这个工具会自动创建一个新的虚拟环境来安装或者运行python程序，从而避免上面的问题。
在Arch Linux上安装pipx：sudo pacman -S pipx
将pipx添加到PATH中：pipx ensurepath
完成上述操作后重启终端，之后就可以使用pipx安装python包了</description>
    </item>
    
    <item>
      <title>[Proxy]终端配置代理的简单方法</title>
      <link>https://waytohill.github.io/posts/terminal-proxy/</link>
      <pubDate>Wed, 24 Jan 2024 14:10:48 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/terminal-proxy/</guid>
      <description>我们在使用终端运行git、npm时，经常因为网络问题出现连接错误，上传、下载东西尝试半天返回timeout，系统虽然可以通过设置代理的方式使用，但是由于终端并不能读取系统的配置，仍然不能使用代理。
本文介绍可以让终端走代理的设置方法。
Linux &amp;amp; macOS 临时设置 终端可以通过设置http_proxy和https_proxy让终端走指定的代理。
在终端执行下面两条命令
export http_proxy=http://127.0.0.1:7890 export https_proxy=$http_proxy 其中7890是我使用的http代理对应的端口，不能直接复制。可以在自己使用的代理软件中查看具体的端口是多少。
以上命令只是临时生效，终端关闭后就失效了，下次打开需要重新配置。
代理脚本 下面这个脚本提供了开关代理的两个方法。
function proxy_on(){ export http_proxy=http://127.0.0.1:7890 export https_proxy=$http_proxy echo -e &amp;#34;proxy on.&amp;#34; } function proxy_off(){ unset http_proxy https_proxy echo -e &amp;#34;proxy off.&amp;#34; } 上述脚本可以实现终端开关代理的功能，使用proxy_on打开代理，使用proxy_off关闭代理。
将上述脚本写入.zprofile，或者.bash_profile，或者你使用的终端对应的配置文件，在终端输入echo $SHELL查看自己使用的终端类型。
可以使用curl -I http://www.google.com或者curl cip.cc验证是否配置成功。
Windows cmd设置代理方法与Linux类似
set http_proxy=http://127.0.0.1:7890 set https_proxy=http:127.0.0.1:7890 还原方法
set http_proxy= set https_proxy= Git代理 # set proxy git config --global http.proxy &amp;#39;socks5://127.0.0.1:7890&amp;#39; git config --global https.proxy &amp;#39;socks5://127.0.0.1:7890&amp;#39; # reset proxy git config --global --unset http.</description>
    </item>
    
    <item>
      <title>[zsh]zsh&#43;oh-my-zsh安装配置</title>
      <link>https://waytohill.github.io/posts/zsh&#43;oh-my-zsh/</link>
      <pubDate>Tue, 23 Jan 2024 21:19:05 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/zsh&#43;oh-my-zsh/</guid>
      <description>本文介绍安装zsh和zsh的配置管理工具oh-my-zsh的方法
安装zsh Arch Linux环境下，输入yay -S zsh进行安装
macOS默认是有zsh的，如果没有的话输入brew install zsh安装
更改默认终端 这一步Linux和macOS命令相同
输入chsh -s /bin/zsh将默认终端更改为zsh
输入echo $SHELL查看返回结果是不是zsh
安装oh-my-zsh oh-my-zsh官方提供了两种安装方法
sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; sh -c &amp;#34;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&amp;#34; 上面的两个安装方法因为网络问题可能很难成功，因此可以使用下面的代替，把github替换成了gitee，更容易访问，内容是一样的
sh -c &amp;#34;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&amp;#34; sh -c &amp;#34;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&amp;#34; 如果上面的两个方法都不行，或者没有curl或wget，也可以选择手动安装
首先输入git clone git@gitee.com:mirrors/oh-my-zsh.git,把oh-my-zsh项目clone下来，这是终端当前目录下会出现一个名为oh-my-zsh的文件夹
之后输入sh oh-my-zsh/tools/install.sh，执行安装脚本
安装完成后输入zsh，如果光标变成一个绿色箭头，说明安装成功了，此时的主题是oh-my-zsh的默认主题“robbyrussell”，至此zsh和oh-my-zsh就安装完毕了，此时~目录下会有一个名为.zshrc的配置文件，用来对zsh终端进行快速配置，如果没有的话可以使用cp /etc/oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc复制一份模板文件到~目录下
修改主题 输入vim .zshrc打开配置文件
将ZSH_THEME修改为自己喜欢的主题名，我推荐ys，也可以从主题列表中找自己喜欢的用
修改完重启终端或者输入source ~/.zshrc即可查看效果
安装插件 这里只列出一些常用插件的安装和配置方法，需要安装其他插件可以自行搜索或者从这个插件列表中寻找
配置方法 输入vim .zshrc打开配置文件
将想要使用的插件名输入到plugins后面的括号中，重启或者输入source .zshrc生效，不同插件用空格或者换行隔开，不能用逗号
常用插件 git
这个是默认开启的，有了这个插件可以方便使用git命令的缩写
输入cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh查看可用缩写
Z
这个插件可以让我们很方便的实现不同目录之间的跳转，可以通过z 目录名直接跳转到曾经输入过的目录</description>
    </item>
    
    <item>
      <title>[ArchLinux]Basic Settings for Arch Linux</title>
      <link>https://waytohill.github.io/posts/archlinux-simple-setting/</link>
      <pubDate>Sun, 21 Jan 2024 13:47:35 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/archlinux-simple-setting/</guid>
      <description>安装图形界面（dwm） 之前安装arch Linux系统的文章里写了怎么安装显卡驱动，这里就不再赘述，因此后续步骤默认安装了显卡驱动，如果没有安装可以先看前面的文章进行安装
安装xorg桌面服务
sudo pacman -S xorg xorg-server xorg-xinit
安装dwm
下载dwm源码
git clone https://git.suckless.org/dwm
编译并安装
下载完终端当前目录会出现一个名字是dwm的文件夹，输入cd dwm进入
在dwm文件夹下输入sudo make clean install进行安装
配置startx
安装完成后进行startx配置
打开家目录下的.xinitrc文件夹，在最后一行输入exec dwm,如果还有其他exec语句记得注释掉，否则会发生错误导致无法进入图形环境
保存并关闭文件，此时输入startx可以进入图形界面，使用shift+alt+q可以退出图形界面
设置登录后自动进入图形环境
打开~/.bash_profile，在文件最后一行输入：
if [ -z &amp;#34;${DISPLAY}&amp;#34; ] &amp;amp;&amp;amp; [ &amp;#34;${XDG_VTNR}&amp;#34; -eq 1 ]; then exec startx fi 这样以后登陆之后就会自动进入图形界面。
终端模拟器（st） 安装方法与dwm类似
下载st源码
git clone https://git.suckless.org/st
编译并安装
进入st文件夹，输入sudo make clean install进行安装
安装好后在图形界面下，使用shift+alt+enter可以打开终端
程序启动器（dmenu） 这个同样是suckless这个组织推出的应用，安装好这个后，只要在dwm界面下使用alt+p可以打开dmenu，之后就可以通过输入程序名字启动应用，非常方便
这个应用可以使用pacman下载，不用像上面两个一样下载源码安装，但是想自己编译安装的朋友也可以参考上面的方法自行安装
sudo pacman -S dmenu
文件管理器（ranger） 终端版文件管理器
sudo pacman -S ranger</description>
    </item>
    
    <item>
      <title>[OS]Windows11&#43;Arch Linux双系统安装教程</title>
      <link>https://waytohill.github.io/posts/archlinux-install/</link>
      <pubDate>Wed, 03 Jan 2024 13:11:58 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/archlinux-install/</guid>
      <description>记录一下在已经安装Windows11的情况下安装Arch Linux双系统的方法。
0 前期准备 下载ISO文件，在Arch Linux下载站中找到国内的下载源下载。
制作安装盘，推荐用Rufus进行写入，写入方式选DD，分区方案选GPT，启动方式选UEFI。
硬盘分区，使用Windows自带的磁盘管理器，分出一块空间用来安装Arch Linux，大小根据自己的需要划分。
EFI分区扩充，Windows默认的EFI分区大小是100M，我们想用来同时引导Windows和Arch Linux的话空间不够，因此需要进行扩充，推荐使用傲梅分区助手扩充，一般300M左右就足够了。
BIOS相关设置，把首选启动项改成USB硬盘，如果硬盘是NVMe的，那么要把硬盘启动方式改为AHCI。进入BIOS的具体方法是在开机出现品牌logo时连击特定按键（不同品牌电脑按键不同，具体是哪个可以搜索一下）
1 启动到archiso 把电脑关机，插入制作好的安装盘后开机，在弹出的界面选第一个(Arch Linuxinstallmedium(x86_64,UEFI))，进入archiso。
2 连接网络 如果你连接了网线可以通过DHCP获取到IP，如果跟我一样是无线连接，就需要手动连接到WiFi，步骤如下：
输入iwctl，进入iwd模式；
在iwd模式下输入device list，查询网卡的名字，我的网卡名字是wlan0，因此接下来的命令可以用你的网卡名字代替wlan0；
输入station wlan0 scan，扫描可以连接的网络；
输入station wlan0 get-networks，列出可以连接的网络；
输入station wlan0 connect wifiname，然后输入密码，连接WiFi，其中wifiname是你要连接的WiFi名；
输入exit，退出iwd模式；
输入ip a，查看是否连接成功，或者输入ping baidu.com -c 4，检查是否连接成功（出现图中结果即为联网）；
3 设置mirrorlist 输入nano /etc/pacman.d/mirrorlist
从下列镜像源中选一个添加到文件中，保存后关闭
Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.cloud.tencent.com/archlinux/$repo/os/$arch Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch 4 硬盘分区 输入lsblk，检查硬盘，此时还看不到之前划分好的空间，因为还没有建立分区，记住自己划分的空间所在磁盘的名字，进入下一步（我的是sda，/sda2是划分好的空间，图中红线部分）
输入cfdisk /dev/sda，此处的sda根据你的磁盘名字进行替换，此时画面最后一行有一个名为“Free space”的空间，这就是在前期准备中划分好的空间
选中“Free space”，之后选择New并单击回车进行创建分区（图来自网络） 指定要创建的分区的大小，图中空闲空间大小为3G，因此输入3G，实际可以按照你划分的大小进行输入，文件类型选择Linux filesystem（图来自网络） 最后选中Write，单击回车，输入yes后再点击回车，此时完成分区创建 选择Quit，单击回车，返回到命令行界面 输入lsblk，检查分区是否建立（图中/dev/sda2是我建立好的分区，大小是360G） 将刚才分好的区格式化为ext4格式（2.e中新建立的分区），输入mkfs.ext4 /dev/sda2进行格式化</description>
    </item>
    
    <item>
      <title>What I have and haven&#39;t done in 2023</title>
      <link>https://waytohill.github.io/posts/2023-review/</link>
      <pubDate>Mon, 01 Jan 2024 12:45:15 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/2023-review/</guid>
      <description>In 2023, I did nothing.
In 2024, I hope I can finish the following list.
Write blogs. Learn Blender. Improve programming skills. Read some books Loss weight. Pride hurts, modesty benefits.</description>
    </item>
    
    <item>
      <title>[Blender] How to Make Transparent Materials in Blender 3D</title>
      <link>https://waytohill.github.io/posts/blender-transparent-material/</link>
      <pubDate>Tue, 26 Dec 2023 14:32:46 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/blender-transparent-material/</guid>
      <description>记录一下Blender中透明材质的设置方法
1 Eevee渲染引擎下透明材质设置方法 方法来源：https://blender.stackexchange.com/questions/81851/does-transparency-work-in-eevee
Render → Screen Space Reflections - On
Render → Screen Space Reflections → Refraction - On
Material → Surface → Principled BSDF → Transmission - 1.000
Material → Surface → Principled BSDF → Roughness - Adjust to your needs
Material → Settings → Blend Mode - Opaque
Material → Settings → Screen Space Refraction - On
Material → Settings → Refraction Depth - Adjust to your needs.</description>
    </item>
    
    <item>
      <title>[Lyrics]サイレントマジョリティー-欅坂46</title>
      <link>https://waytohill.github.io/posts/lyrics-silent-majority-keyakizaka46/</link>
      <pubDate>Mon, 25 Dec 2023 19:17:13 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/lyrics-silent-majority-keyakizaka46/</guid>
      <description>人が溢れた交差点を　どこへ行く（押し流され）
似たような服を着て　似たような表情で
群れの中に紛れるように　歩いてる（疑わずに）
誰かと違うことに　何をためらうのだろう
先行く人が振り返り　列を乱すなと
ルールを説くけど　その目は死んでいる
君は君らしく生きて行く自由があるんだ
大人たちに支配されるな
初めから　そう諦めてしまったら
僕らは何のために　生まれたのか
夢を見ることは時には孤独にもなるよ
誰もいない道を進むんだ
この世界は群れていても始まらない
Yesでいいのか　サイレントマジョリティー
どこかの国の大統領が　言っでいた
声を上げない者たちは　賛成していると
選べる事が大事なんだ　人に任せるな
行動しなければ　Noと伝わらない
君は君らしくやりたいことをやるだけさ
One of Themになりさがるな
ここにいる人の数だけ道はある
自分の夢の方に　歩けばいい
見栄やプライドの鎖に繋がれたような
つまらない大人は置いて行け
さあ未来は君たちのためにある
Noと言いなよ　サイレントマジョリティー
誰がの後ついて行けば　傷つかないけど
その群れが総意だと　ひとまとめにされる
君は君らしく生きて行く自由があるんだ
大人たちに支配されるな
初めからそう諦めてしまったら
僕らは何のために　生まれたのか
夢を見る事は時に孤独にもなるよ
誰もいない道を進むんだ
この世界は群れていても始まらない
Yesでいいのか　サイレントマジョリティー</description>
    </item>
    
    <item>
      <title>[Lyrics]春擬き</title>
      <link>https://waytohill.github.io/posts/lyrics-harumodoki/</link>
      <pubDate>Sat, 23 Dec 2023 10:52:17 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/lyrics-harumodoki/</guid>
      <description>探しに行くんだ　そこへ
空欄を埋め　完成した定理
正しい筈なのに
ひらりひら　からまわる
未来は歪で
僅かな亀裂から　いくらでも縒れて
理想から逸れていくんだ
ぬるま湯が
すっと冷めていく音がしてた
道を変えるのなら
今なんで
こんなレプリカは　いらない
本物と呼べるものだけでいい
探しに行くんだ　そこへ
「でもそれは良く出来だフェアリーテイルみたい」
答えの消えた　空欄を見つめる
埋めた筈なのに
どうしても　わからない
綺麗な花は大事に育てても
遠慮ない土足で
簡単に踏み躙られた
降り積もる白に
小さな芽覆われてく
遠い遠い春は
雪の下
見えないものはどうしても
記憶から薄れてしまうんだ
探しに行く場所さえも
見失う僕たしは
気付かず芽を踏む
思い出を頼りに創ってた花はすぐ枯れた
足元には気づかずに
本物と呼べる場所を
探しに行くのは　きっと
今なんだ
こんなレプリカはいらない
本物と呼べるものだけでいい
探しに行くから　君を
「ありがとう　小さな芽　見つけてくれたこと」
君はつぶやいた</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://waytohill.github.io/posts/my-first-post/</link>
      <pubDate>Sun, 11 Jun 2023 22:32:49 +0800</pubDate>
      
      <guid>https://waytohill.github.io/posts/my-first-post/</guid>
      <description>This is my first post.</description>
    </item>
    
  </channel>
</rss>
